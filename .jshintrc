/**
 * Created by Wemakefocus on 2016/8/23.
 */
{
    "bitwise": true, // prohibits the use of bitwise operators such as ^ (XOR), | (OR) and others
    "camelcase": true, // force all variable names to use either camelCase style or UPPER_CASE with underscores
    "curly": true, // requires you to always put curly braces around blocks in loops and conditionals
    "eqeqeq": true, // prohibits the use of == and != in favor of === and !==
    "esversion": 5, //specify the ECMAScript version to which the code must adhere

    /*
     *   // forin requires all for in loops to filter object's items
     * for (key in obj) {
     *     if (obj.hasOwnProperty(key)) {
     *   // We are sure that obj[key] belongs to the object and was not inherited.
     *     }
     * }
     */
    "forin": true,
    "freeze": true, // options prohibits overwriting prototypes of native objects such as Array, Date and so on
    "immed": true, // prohibits the use of immediate function invocations without wrapping them in parentheses
    "indent": 4, // sets a specific tab width for your code

    /*
     * Latedef prohibits the use of a variable before it was defined.
     * Setting this option to "nofunc" will allow function declarations to be ignored.
     * Modern JS engines will look ahead and find your function definition before executing.
     */
    "latedef": "nofunc",
    "newcap": true, // requires you to capitalize names of constructor functions.
    "noarg": true, // prohibits the use of arguments.caller and arguments.callee
    "noempty": true, // warns when you have an empty block in your code.
    "nonbsp": true, // warns about "non-breaking whitespace" characters.
    "nonew": true, // prohibits the use of constructor functions for side-effects
    "plusplus": false, // prohibits the use of unary increment and decrement operators
    "quotmark": "double", // enforces the consistency of quotation marks used throughout your code
    "undef": true, // prohibits the use of explicitly undeclared variables
    "unused": false, // warns when you define and never use your variables
    "strict": true, // requires the code to run in ECMAScript 5's strict mode
    "maxparams": 10, // lets you set the max number of formal parameters allowed per function
    "maxdepth": 5, // lets you control how nested do you want your blocks to be
    "maxstatements": 40, // lets you set the max number of statements allowed per function
    "maxcomplexity": 8, // lets you control cyclomatic complexity throughout your code
    "maxlen": 120, // lets you set the maximum length of a line
    "asi": false, // suppresses warnings about missing semicolons
    "boss": false, // suppresses warnings about the use of assignments in cases where comparisons are expected
    "debug": false, // suppresses warnings about the debugger statements in your code
    "eqnull": true, // suppresses warnings about == null comparisons
    "esnext": false, // tells JSHint that your code uses ECMAScript 6 specific syntax
    "evil": false, // suppresses warnings about the use of eval
    "expr": false, // suppresses warnings about the use of expressions where normally you would expect to see assignments or function calls

    /*
     * funcscope suppresses warnings about declaring variables inside of control structures
     * while accessing them later from the outside
     */
    "funcscope": false,
    "globalstrict": false, // suppresses warnings about the use of global strict mode.
    "iterator": false, // suppresses warnings about the __iterator__ property
    "lastsemic": false, // suppresses warnings about missing semicolons, but only when the semicolon is omitted for the last statement in a one-line block:
    "laxbreak": false, // suppresses most of the warnings about possibly unsafe line breakings in your code
    "laxcomma": false, // suppresses warnings about comma-first coding style
    "loopfunc": false, // suppresses warnings about functions inside of loops. ???how to make right hint
    "maxerr": 50, // set the maximum amount of warnings JSHint will produce before giving up
    "moz": false, // tells JSHint that your code uses Mozilla JavaScript extensions
    "multistr": false, // suppresses warnings about multi-line strings
    "notypeof": false, // suppresses warnings about invalid typeof operator values
    "proto": false, // suppresses warnings about the __proto__ property
    "scripturl": false, // suppresses warnings about the use of script-targeted URLsâ€”such as javascript:...
    "shadow": false, // suppresses warnings about variable shadowing
    "sub": true, // suppresses warnings about using [] notation when it can be expressed in dot notation: person['name'] vs. person.name.
    "supernew": false, // suppresses warnings about "weird" constructions like new function () { ... } and new Object;
    "validthis": false, // suppresses warnings about possible strict violations when the code is running in strict mode and you use this in a non-constructor function
    "noyield": false, // suppresses warnings about generator functions with no yield statement in them.
    "withstmt": false, // suppresses warnings about the use of the with statement

    "browser": true, // defines globals exposed by modern browsers
    "node": true, // defines global available when your code is running inside of the Node runtime environment

    "globals": { // allow for global variables that are specific to the test environment
        "angular": false, // Setting it to false will trigger JSHint to consider that variable read-only
        "$": false
    }
}